stages:
  - build
  - deploy
  - test_coverage

before_script:
  - echo "Starting the runner..."

coverage_test_production:
  stage: test_coverage
  script:
    - docker exec dynak.com-$(git rev-parse --short HEAD) npm run test -- --coverage --watchAll=false
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  only:
    - master

coverage_test_develop:
  stage: test_coverage
  script:
    - docker exec dynak.com-$(git rev-parse --short HEAD) npm run test -- --coverage --watchAll=false
  coverage: /All\sfiles.*?\s+(\d+.\d+)/
  only:
    - develop

build_production:
  stage: build
  script:
    - echo "Building for production..."
    - bash ./clean_production.sh
    - git checkout master &&
      git pull &&
      docker build -t production/dynak.com-$(git rev-parse --short HEAD) .
  only:
    - master

build_develop:
  stage: build
  script:
    - echo "Building for develop..."
    - bash ./clean_develop.sh
    - git checkout develop &&
      git pull &&
      docker build -t develop/dynak.com-$(git rev-parse --short HEAD) .
  only:
    - develop

deploy_production:
  stage: deploy
  script:
    - echo "Deploying production..."
    - docker run -v /var/messages/:/opt/dynak.com/messages
      --name dynak.com-$(git rev-parse --short HEAD)
      -p 5000:5000
      -p 8080:8080
      -d production/dynak.com-$(git rev-parse --short HEAD)
  only:
    - master

deploy_develop:
  stage: deploy
  script:
    - echo "Deploying develop..."
    - docker run -v /var/messages-test/:/opt/dynak.com/messages
      --name dynak.com-$(git rev-parse --short HEAD)
      -p 55000:5000
      -p 58080:8080
      -d develop/dynak.com-$(git rev-parse --short HEAD)
  only:
    - develop
